{"version":3,"sources":["components/Nav.js","components/Header.js","components/Article.js","components/CreateModal.js","App.js","serviceWorker.js","index.js"],"names":["Nav","onClickContent","e","preventDefault","props","event","target","dataset","id","onClickCreate","event2","nextProps","nextState","data","this","console","log","i","lists","length","push","key","data-id","href","title","onClick","className","Component","Header","class","type","Article","on_DoubleClick_text","onDoubleClick","onClickData","action","method","onLoad","on_load_form","articleUpdateOn","placeholder","desc","value","on_click_update_button","readOnly","CreateModal","on_click_confirm_button","form","elements","status","vlaue","App","state","datasCount","datas","onClickId","createModalOn","on_create_button_click","undefined","concat","setState","Object","assign","Number","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f2392d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./Nav.css\"\r\n\r\nclass Nav extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(nextProps.data === this.props.data) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  onClickContent = (e) => {\r\n    e.preventDefault(); //<a> 태그에서 클릭시 화면 깜박임을 막기 위해 선언\r\n    this.props.event(e.target.dataset.id);\r\n    // this.props.event(id);\r\n    }\r\n  \r\n  onClickCreate = (e) => {\r\n    this.props.event2(e);\r\n  }\r\n\r\n  render() {\r\n    console.log('nav');\r\n    var data = this.props.data;\r\n    var i = 0;\r\n    var lists = [];\r\n    // bind할시에 넣어줄 함수 미리 선언\r\n    // var onClickBindContet; \r\n    while (i < data.length) {\r\n      //onClickBindContent, data[i].id 바인드한 함수 생성\r\n      // onClickBindContet = onClickContent.bind(data[i].id); \r\n      lists.push(\r\n        <li key={data[i].id}>\r\n          {/*e.target 사용 함수*/}\r\n          <a data-id={data[i].id} href={\"/contents/\" + data[i].title} \r\n            onClick={this.onClickContent}>{data[i].title}</a>\r\n          {/*bind한 사용 함수*/}\r\n          {/* <a data-id={data[i].id} href={\"/contents/\" + data[i].title} \r\n            onClick={onClickBindContet}>{data[i].title}</a> */}\r\n        </li>)\r\n      i = i + 1;\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='Nav'>\r\n        <div className=\"Category\">▤ Category</div>\r\n        <ul>\r\n          {lists}\r\n          <button onClick={this.onClickCreate}>create</button>\r\n        </ul>\r\n        <div className=\"footer\">footer</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import React, { Component } from 'react';\r\nimport \"./Header.css\";\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Header\">\r\n                <div className=\"home-logo\"><h4>YOUTUBE_HELPER</h4></div>\r\n                <div className=\"search\">\r\n                    <span>\r\n                        검색 \r\n                        <input class=\"search_textbox\" type=\"textarea\"></input>\r\n                    </span>\r\n                </div>\r\n                <div className=\"auth\"><p>⊙ Auth</p></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport './Article.css';\r\n\r\nclass Article extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('should');\r\n        if(nextProps.onClickData===this.props.onClickData) {\r\n            debugger;\r\n            return false;        \r\n        }\r\n        return true;\r\n    }\r\n\r\n    on_DoubleClick_text = (e) => {\r\n        this.props.onDoubleClick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"Article\" action=\"\" method=\"post\" onLoad={this.on_load_form}>\r\n                <span onDoubleClick={this.on_DoubleClick_text}>\r\n                {this.props.onClickData.articleUpdateOn ?\r\n                    <span>\r\n                    <input type=\"text\" placeholder={this.props.onClickData.title}></input>\r\n                    <input type=\"text\" placeholder={this.props.onClickData.desc}></input>\r\n                    </span>\r\n                    :\r\n                    <span>\r\n                    <input type=\"text\" value={this.props.onClickData.title}></input>                   \r\n                    <input type=\"text\" value={this.props.onClickData.desc}></input>\r\n                    </span>     \r\n                }\r\n                </span>\r\n                <input className=\"update-button\" type=\"submit\" value=\"update\" onClick={this.on_click_update_button} readOnly=\"false\"></input>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Article;\r\n","import React, { Component } from 'react';\r\nimport './CreateModal.css';\r\nclass CreateModal extends Component {\r\n\r\n    on_click_confirm_button = (e) => {\r\n        e.preventDefault();\r\n        let title = e.target.form.elements[0].value;\r\n        let desc = e.target.form.elements[1].value;\r\n        if (this.props.status === true) {\r\n            this.props.event(e, title, desc);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log('modal');\r\n        return (\r\n            <div className=\"CreateModal\">\r\n                <div className=\"CreateModal-title\">Category 생성</div>\r\n                <form className=\"CreateModal-content\" action=\"\" method=\"post\">\r\n                    <input id=\"categoryTitle\" type=\"textarea\" placeholder=\"타이틀 입력\"></input>\r\n                    <input id=\"categoryDesc\" type=\"textara\" placeholder=\"내용입력\"></input>\r\n                    <input type=\"submit\" className=\"CreateModal-button\" onClick={this.on_click_confirm_button} vlaue=\"confirm\"></input>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateModal;\r\n","import React, { Component } from 'react';\nimport \"./App.css\";\nimport Nav from './components/Nav';\nimport Header from './components/Header';\nimport Article from './components/Article';\nimport CreateModal from './components/CreateModal';\n\n\n//const string = \"hello\";\nclass App extends Component {\n  constructor(props) {\n    //componet가 실행될 때 constructor가 실행되서 초기화를 담당한다.\n    super(props);\n    this.state = {\n      //Nav\n      datasCount: 3,\n      datas: [\n        { id: 1, title: \"HTML\", desc: \"HTML is HyperText Markup Language\" },\n        { id: 2, title: \"CSS\", desc: \"CSS is for design\" },\n        { id: 3, title: \"JavaScript\", desc: \"CSS is fo interactive\" }\n      ],\n      onClickId: 1,\n      onClickData: { id: 1, title: \"HTML\", desc: \"HTML is HyperText Markup Language\" },\n      //Category Create\n      createModalOn: false,\n\n      //Article Update\n      articleUpdateOn: false\n\n    }\n  }\n  componentDidMount() {\n\n  }\n\n  render() {\n    //Nav의 카테고리 클릭시\n    let on_content_click = (id) => {\n      let data = this.state.datas[(Number.parseInt(id) - 1)];\n      this.setState(\n        { onClickId: id, onClickData: data }\n      );\n    }\n\n    //Nav의 카테고리 중 create 버튼 클릭 시\n    let on_create_button_click = (e, title, desc) => {\n\n      if (title === undefined || desc === undefined) {\n        this.setState({\n          createModalOn: !this.state.createModalOn\n        })\n        return;\n      }\n\n      let datasCount = this.state.datasCount + 1;\n      let data = { 'id': datasCount, 'title': title, 'desc': desc };\n      let datas = this.state.datas.concat(data);\n\n      this.setState({\n        'createModalOn': !this.state.createModalOn,\n        'datasCount': datasCount,\n        'datas': datas\n      })\n    }\n\n    //Article의 content 더블클릭 시\n    let on_update_double_click = (e) => {\n      this.setState({\n        articleUpdateOn: !this.state.articleUpdateOn\n      });\n    }\n\n    let onClickData = Object.assign(this.state.onClickData, {articleUpdateOn :this.state.articleUpdateOn});\n    console.log('app');\n    return (\n      <div className=\"App\">\n        <Header></Header>\n        <div className=\"App-body\">\n          <Nav event={on_content_click}\n            event2={on_create_button_click}\n            data={this.state.datas}></Nav>\n          <Article onDoubleClick={on_update_double_click} onClickData={onClickData}></Article>\n        </div>\n        {this.state.createModalOn ? <CreateModal event={on_create_button_click} status={this.state.createModalOn}></CreateModal> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}