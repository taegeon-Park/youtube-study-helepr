{"ast":null,"code":"export const httpGetConnection = (url, parameters, resSuc, resFail) => {\n  let plusParamsUrl = url + '?'; // plus parameters\n\n  let keys = Object.keys(parameters);\n\n  if (parameters !== null) {\n    keys.forEach(key => {\n      plusParamsUrl += `${key}=${parameters.key}&`;\n    });\n  } // creation request\n\n\n  let req = new XMLHttpRequest(); // request open, with async option is true\n\n  req.open('GET', plusParamsUrl, true); // set request-header authorization for cors\n\n  req.setRequestHeader(\"Authorization\", \"Bearer\");\n\n  req.onreadystatechange = e => {\n    if (req.readyState === 4) {\n      resSuc(req.responseText);\n    } else {\n      resFail();\n    }\n  };\n\n  return req;\n};","map":{"version":3,"sources":["D:/react/test-study-redux/src/modules/httpConnection/httpGetConnection.js"],"names":["httpGetConnection","url","parameters","resSuc","resFail","plusParamsUrl","keys","Object","forEach","key","req","XMLHttpRequest","open","setRequestHeader","onreadystatechange","e","readyState","responseText"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAG,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,EAA0BC,OAA1B,KAAsC;AACrE,MAAIC,aAAa,GAAGJ,GAAG,GAAG,GAA1B,CADqE,CAErE;;AACA,MAAIK,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,UAAZ,CAAX;;AACA,MAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvBI,IAAAA,IAAI,CAACE,OAAL,CAAaC,GAAG,IAAI;AAClBJ,MAAAA,aAAa,IAAK,GAAEI,GAAI,IAAGP,UAAU,CAACO,GAAI,GAA1C;AACD,KAFD;AAGD,GARoE,CASrE;;;AACA,MAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV,CAVqE,CAWrE;;AACAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBP,aAAhB,EAA+B,IAA/B,EAZqE,CAarE;;AACAK,EAAAA,GAAG,CAACG,gBAAJ,CAAqB,eAArB,EAAsC,QAAtC;;AACAH,EAAAA,GAAG,CAACI,kBAAJ,GAA0BC,CAAD,IAAO;AAC9B,QAAIL,GAAG,CAACM,UAAJ,KAAmB,CAAvB,EAA0B;AACxBb,MAAAA,MAAM,CAACO,GAAG,CAACO,YAAL,CAAN;AACD,KAFD,MAEO;AACLb,MAAAA,OAAO;AACR;AACF,GAND;;AAQA,SAAOM,GAAP;AACD,CAxBM","sourcesContent":["export const httpGetConnection = (url, parameters, resSuc, resFail) => {\r\n  let plusParamsUrl = url + '?';\r\n  // plus parameters\r\n  let keys = Object.keys(parameters);\r\n  if (parameters !== null) {\r\n    keys.forEach(key => {\r\n      plusParamsUrl += `${key}=${parameters.key}&`\r\n    });\r\n  }\r\n  // creation request\r\n  let req = new XMLHttpRequest();\r\n  // request open, with async option is true\r\n  req.open('GET', plusParamsUrl, true);\r\n  // set request-header authorization for cors\r\n  req.setRequestHeader(\"Authorization\", \"Bearer\");\r\n  req.onreadystatechange = (e) => {\r\n    if (req.readyState === 4) {\r\n      resSuc(req.responseText);\r\n    } else {\r\n      resFail();\r\n    }\r\n  }\r\n\r\n  return req;\r\n};"]},"metadata":{},"sourceType":"module"}