{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\test-study-redux\\\\src\\\\components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport Note from './Main/Note';\nimport './Main.css';\nimport store from '../store';\nimport httpGetConnection from '../modules/httpConnection/httpGetConnection';\nexport default class Main extends Component {\n  constructor(props) {\n    super(props);\n    this.mount = false;\n    this.state = {\n      categorySelected: store.getState().categorySelected\n    };\n    this.state = {};\n    store.subscribe(() => {\n      if (this.mount) {\n        let _state = store.getState();\n\n        console.log(_state);\n        this.setState(_state);\n      }\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('fdsfdsf', this.state);\n    console.log('fdfsdf', nextState);\n    if (nextState) if (this.state === null) return false;\n    if (this.state.categorySelected === nextState.categorySelected) return false;\n    return true;\n  }\n\n  async componentDidMount() {\n    this.mount = true;\n  }\n\n  render() {\n    let _categoryCode = this.state.categorySelected;\n\n    if (_categoryCode !== false) {\n      //let url = \"http://110.11.49.218:8080/myapp/getCategoryItems\";\n      //{ userEmail: 'vrimd1017@gmail.com', categoryCode: _categoryCode }\n      let url = \"http://localhost:9000/test2\";\n      httpGetConnection(url, null, responseJson => {\n        store.dispatch({\n          type: \"NOTES_LOADED\",\n          noteArr: responseJson\n        });\n      }, () => {\n        alert(\"Connection Fail\");\n      });\n    }\n\n    let notes = [];\n    notes = this.state.noteArr.map(note => /*#__PURE__*/React.createElement(Note, {\n      key: note.noteId,\n      Note: note,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, store.getState().categorySelected ? notes : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    }, \"\\uCE74\\uD14C\\uACE0\\uB9AC \\uC120\\uD0DD\\uD574\\uB77C\\uC639\"));\n  }\n\n}","map":{"version":3,"sources":["D:/react/test-study-redux/src/components/Main.js"],"names":["React","Component","Note","store","httpGetConnection","Main","constructor","props","mount","state","categorySelected","getState","subscribe","_state","console","log","setState","shouldComponentUpdate","nextProps","nextState","componentDidMount","render","_categoryCode","url","responseJson","dispatch","type","noteArr","alert","notes","map","note","noteId"],"mappings":";AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,YAAP;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,iBAAP,MAA8B,6CAA9B;AAEA,eAAe,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAG1CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAFnBC,KAEmB,GAFX,KAEW;AAAA,SADnBC,KACmB,GADX;AAACC,MAAAA,gBAAgB,EAAEP,KAAK,CAACQ,QAAN,GAAiBD;AAApC,KACW;AAEjB,SAAKD,KAAL,GAAa,EAAb;AAEAN,IAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,UAAI,KAAKJ,KAAT,EAAgB;AACd,YAAIK,MAAM,GAAGV,KAAK,CAACQ,QAAN,EAAb;;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAKG,QAAL,CAAcH,MAAd;AACD;AACF,KAND;AAOD;;AAEDI,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1CL,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsB,KAAKN,KAA3B;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBI,SAArB;AACA,QAAIA,SAAJ,EACA,IAAI,KAAKV,KAAL,KAAe,IAAnB,EAAyB,OAAO,KAAP;AACzB,QAAI,KAAKA,KAAL,CAAWC,gBAAX,KAAgCS,SAAS,CAACT,gBAA9C,EAAgE,OAAO,KAAP;AAEhE,WAAO,IAAP;AACD;;AAGF,QAAMU,iBAAN,GAA0B;AACvB,SAAKZ,KAAL,GAAa,IAAb;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP,QAAIC,aAAa,GAAG,KAAKb,KAAL,CAAWC,gBAA/B;;AACA,QAAIY,aAAa,KAAK,KAAtB,EAA6B;AAC3B;AACA;AACA,UAAIC,GAAG,GAAG,6BAAV;AACAnB,MAAAA,iBAAiB,CAACmB,GAAD,EAAM,IAAN,EACdC,YAAD,IAAkB;AAChBrB,QAAAA,KAAK,CAACsB,QAAN,CAAe;AACbC,UAAAA,IAAI,EAAE,cADO;AAEbC,UAAAA,OAAO,EAAEH;AAFI,SAAf;AAID,OANc,EAOf,MAAM;AAAEI,QAAAA,KAAK,CAAC,iBAAD,CAAL;AAA0B,OAPnB,CAAjB;AASD;;AAED,QAAIC,KAAK,GAAG,EAAZ;AACAA,IAAAA,KAAK,GAAG,KAAKpB,KAAL,CAAWkB,OAAX,CAAmBG,GAAnB,CACNC,IAAI,iBAAK,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACC,MAAhB;AAAwB,MAAA,IAAI,EAAED,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAAR;AAIA,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG5B,KAAK,CAACQ,QAAN,GAAiBD,gBAAjB,GACCmB,KADD,gBACS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAFZ,CADF;AAOD;;AA5DyC","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport Note from './Main/Note'\r\nimport './Main.css';\r\nimport store from '../store';\r\nimport httpGetConnection from '../modules/httpConnection/httpGetConnection';\r\n\r\nexport default class Main extends Component {\r\n  mount = false;\r\n  state = {categorySelected: store.getState().categorySelected}\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n\r\n    store.subscribe(() => {\r\n      if (this.mount) {\r\n        let _state = store.getState();\r\n        console.log(_state);\r\n        this.setState(_state);\r\n      }\r\n    });\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log('fdsfdsf',this.state);\r\n    console.log('fdfsdf',nextState)\r\n    if (nextState)\r\n    if (this.state === null) return false;\r\n    if (this.state.categorySelected === nextState.categorySelected) return false;\r\n    \r\n    return true;\r\n  }\r\n\r\n\r\n async componentDidMount() {\r\n    this.mount = true;\r\n  }\r\n\r\n  render() {\r\n    let _categoryCode = this.state.categorySelected;\r\n    if (_categoryCode !== false) {\r\n      //let url = \"http://110.11.49.218:8080/myapp/getCategoryItems\";\r\n      //{ userEmail: 'vrimd1017@gmail.com', categoryCode: _categoryCode }\r\n      let url = \"http://localhost:9000/test2\";\r\n      httpGetConnection(url, null,\r\n        (responseJson) => {\r\n          store.dispatch({\r\n            type: \"NOTES_LOADED\",\r\n            noteArr: responseJson\r\n          })\r\n        },\r\n        () => { alert(\"Connection Fail\") }\r\n      )\r\n    }\r\n\r\n    let notes = [];\r\n    notes = this.state.noteArr.map(\r\n      note => (<Note key={note.noteId} Note={note}></Note>)\r\n    );\r\n\r\n    return (\r\n      <div className=\"Main\">\r\n        {store.getState().categorySelected ?\r\n          notes : <p>카테고리 선택해라옹</p>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}