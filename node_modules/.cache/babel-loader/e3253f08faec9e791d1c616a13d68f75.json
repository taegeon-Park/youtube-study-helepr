{"ast":null,"code":"const httpGetConnection = (url, parameters, resSuc, resFail) => {\n  let plusParamsUrl = url + '?'; // plus parameters\n\n  if (parameters !== null) {\n    let keys = Object.keys(parameters);\n    keys.forEach(key => {\n      plusParamsUrl += `${key}=${parameters[key]}&`;\n    });\n    plusParamsUrl = plusParamsUrl.slice(0, plusParamsUrl.length - 1);\n  }\n\n  console.log(plusParamsUrl);\n  let json = fetch(plusParamsUrl, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer'\n    }\n  }).then(res => res.json()).then(res => res);\n  console.log(json); // creation request\n  // let req = new XMLHttpRequest();\n  // // request open, with async option is true\n  // req.open('GET', plusParamsUrl, false);\n  // // set request-header authorization for cors\n  // req.setRequestHeader(\"Authorization\", \"Bearer\");\n  // req.onreadystatechange = (e) => {\n  //   switch (req.readyState) {\n  //     case XMLHttpRequest.UNSET:\n  //        console.log(\"현재 XMLHttpRequest 객체의 상태는 UNSET 입니다.<br>\");\n  //         break;\n  //     case XMLHttpRequest.OPENED:\n  //        console.log(\"현재 XMLHttpRequest 객체의 상태는 OPENED 입니다.<br>\");\n  //         break;\n  //     case XMLHttpRequest.HEADERS_RECIEVED:\n  //         console.log(\"현재 XMLHttpRequest 객체의 상태는 HEADERS_RECEIVED 입니다.<br>\");\n  //         break;\n  //     case XMLHttpRequest.LOADING:\n  //         console.log(\"현재 XMLHttpRequest 객체의 상태는 LOADING 입니다.<br>\");\n  //         break;\n  //     case XMLHttpRequest.DONE:\n  //         resSuc(req.responseText);\n  //         break;\n  //     default:\n  //         break;\n  //   }\n  // }\n  // req.send(null);\n  // return req;\n};\n\nexport default httpGetConnection;","map":{"version":3,"sources":["D:/react/test-study-redux/src/modules/httpConnection/httpGetConnection.js"],"names":["httpGetConnection","url","parameters","resSuc","resFail","plusParamsUrl","keys","Object","forEach","key","slice","length","console","log","json","fetch","method","headers","then","res"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,EAA0BC,OAA1B,KAAsC;AAC9D,MAAIC,aAAa,GAAGJ,GAAG,GAAG,GAA1B,CAD8D,CAE9D;;AACA,MAAIC,UAAU,KAAK,IAAnB,EAAyB;AACvB,QAAII,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,UAAZ,CAAX;AACAI,IAAAA,IAAI,CAACE,OAAL,CAAaC,GAAG,IAAI;AAClBJ,MAAAA,aAAa,IAAK,GAAEI,GAAI,IAAGP,UAAU,CAACO,GAAD,CAAM,GAA3C;AACD,KAFD;AAGAJ,IAAAA,aAAa,GAAGA,aAAa,CAACK,KAAd,CAAoB,CAApB,EAAsBL,aAAa,CAACM,MAAd,GAAqB,CAA3C,CAAhB;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ;AACA,MAAIS,IAAI,GAAIC,KAAK,CAACV,aAAD,EAAgB;AAC/BW,IAAAA,MAAM,EAAE,KADuB;AAE/BC,IAAAA,OAAO,EAAC;AACN,uBAAkB;AADZ;AAFuB,GAAhB,CAAL,CAMTC,IANS,CAMJC,GAAG,IAAIA,GAAG,CAACL,IAAJ,EANH,EAOTI,IAPS,CAOJC,GAAG,IAAIA,GAPH,CAAZ;AAQAP,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ,EAnB8D,CAqB9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAlDD;;AAoDA,eAAed,iBAAf","sourcesContent":["const httpGetConnection = (url, parameters, resSuc, resFail) => {\r\n  let plusParamsUrl = url + '?';\r\n  // plus parameters\r\n  if (parameters !== null) {\r\n    let keys = Object.keys(parameters);\r\n    keys.forEach(key => {\r\n      plusParamsUrl += `${key}=${parameters[key]}&`\r\n    });\r\n    plusParamsUrl = plusParamsUrl.slice(0,plusParamsUrl.length-1);\r\n  }\r\n  console.log(plusParamsUrl);\r\n  let json =  fetch(plusParamsUrl, {\r\n    method: 'GET',\r\n    headers:{\r\n      'Authorization' : 'Bearer'\r\n    }\r\n  })\r\n    .then(res => res.json())\r\n    .then(res => res);\r\n  console.log(json);\r\n  \r\n  // creation request\r\n  // let req = new XMLHttpRequest();\r\n  // // request open, with async option is true\r\n  // req.open('GET', plusParamsUrl, false);\r\n  // // set request-header authorization for cors\r\n  // req.setRequestHeader(\"Authorization\", \"Bearer\");\r\n  // req.onreadystatechange = (e) => {\r\n  //   switch (req.readyState) {\r\n  //     case XMLHttpRequest.UNSET:\r\n  //        console.log(\"현재 XMLHttpRequest 객체의 상태는 UNSET 입니다.<br>\");\r\n  //         break;\r\n  //     case XMLHttpRequest.OPENED:\r\n  //        console.log(\"현재 XMLHttpRequest 객체의 상태는 OPENED 입니다.<br>\");\r\n  //         break;\r\n  //     case XMLHttpRequest.HEADERS_RECIEVED:\r\n  //         console.log(\"현재 XMLHttpRequest 객체의 상태는 HEADERS_RECEIVED 입니다.<br>\");\r\n  //         break;\r\n  //     case XMLHttpRequest.LOADING:\r\n  //         console.log(\"현재 XMLHttpRequest 객체의 상태는 LOADING 입니다.<br>\");\r\n  //         break;\r\n  //     case XMLHttpRequest.DONE:\r\n  //         resSuc(req.responseText);\r\n  //         break;\r\n  //     default:\r\n  //         break;\r\n  //   }\r\n  // }\r\n  // req.send(null);\r\n  // return req;\r\n};\r\n\r\nexport default httpGetConnection;"]},"metadata":{},"sourceType":"module"}