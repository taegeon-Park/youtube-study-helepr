{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\react\\\\test-study-redux\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"D:\\\\react\\\\test-study-redux\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";var httpGetConnection=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url,parameters,resSuc,resFail){var plusParamsUrl,keys,json;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:plusParamsUrl=url+'?';//let plusParamsUrl = url;\n// plus parameters\nif(parameters!==null){keys=Object.keys(parameters);keys.forEach(function(key){plusParamsUrl+=\"\".concat(key,\"=\").concat(parameters[key],\"&\");});plusParamsUrl=plusParamsUrl.slice(0,plusParamsUrl.length-1);}console.log('cccc',plusParamsUrl);_context.next=5;return fetch(plusParamsUrl,{method:'GET',headers:{'Authorization':'Bearer'}}).then(function(res){return res.json();}).catch(function(err){return console.log(err);});case 5:json=_context.sent;resSuc(json);// creation request\n// let req = new XMLHttpRequest();\n// // request open, with async option is true\n// req.open('GET', plusParamsUrl, false);\n// // set request-header authorization for cors\n// req.setRequestHeader(\"Authorization\", \"Bearer\");\n// req.onreadystatechange = (e) => {\n//   switch (req.readyState) {\n//     case XMLHttpRequest.UNSET:\n//        console.log(\"현재 XMLHttpRequest 객체의 상태는 UNSET 입니다.<br>\");\n//         break;\n//     case XMLHttpRequest.OPENED:\n//        console.log(\"현재 XMLHttpRequest 객체의 상태는 OPENED 입니다.<br>\");\n//         break;\n//     case XMLHttpRequest.HEADERS_RECIEVED:\n//         console.log(\"현재 XMLHttpRequest 객체의 상태는 HEADERS_RECEIVED 입니다.<br>\");\n//         break;\n//     case XMLHttpRequest.LOADING:\n//         console.log(\"현재 XMLHttpRequest 객체의 상태는 LOADING 입니다.<br>\");\n//         break;\n//     case XMLHttpRequest.DONE:\n//         resSuc(req.responseText);\n//         break;\n//     default:\n//         break;\n//   }\n// }\n// req.send(null);\nreturn _context.abrupt(\"return\",json);case 8:case\"end\":return _context.stop();}}},_callee);}));return function httpGetConnection(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();export default httpGetConnection;","map":{"version":3,"sources":["D:/react/test-study-redux/src/modules/httpConnection/httpGetConnection.js"],"names":["httpGetConnection","url","parameters","resSuc","resFail","plusParamsUrl","keys","Object","forEach","key","slice","length","console","log","fetch","method","headers","then","res","json","catch","err"],"mappings":"2SAAC,GAAMA,CAAAA,iBAAiB,0FAAG,iBAAOC,GAAP,CAAYC,UAAZ,CAAwBC,MAAxB,CAAgCC,OAAhC,8IACrBC,aADqB,CACLJ,GAAG,CAAG,GADD,CAEzB;AACA;AACA,GAAIC,UAAU,GAAK,IAAnB,CAAyB,CACnBI,IADmB,CACZC,MAAM,CAACD,IAAP,CAAYJ,UAAZ,CADY,CAEvBI,IAAI,CAACE,OAAL,CAAa,SAAAC,GAAG,CAAI,CAClBJ,aAAa,YAAOI,GAAP,aAAcP,UAAU,CAACO,GAAD,CAAxB,KAAb,CACD,CAFD,EAGAJ,aAAa,CAAGA,aAAa,CAACK,KAAd,CAAoB,CAApB,CAAsBL,aAAa,CAACM,MAAd,CAAqB,CAA3C,CAAhB,CACD,CACDC,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAmBR,aAAnB,EAXyB,sBAYRS,CAAAA,KAAK,CAACT,aAAD,CAAgB,CACpCU,MAAM,CAAE,KAD4B,CAEpCC,OAAO,CAAC,CACN,gBAAkB,QADZ,CAF4B,CAAhB,CAAL,CAMdC,IANc,CAMT,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,EAAJ,EANM,EAOdC,KAPc,CAOR,SAAAC,GAAG,QAAIT,CAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ,CAAJ,EAPK,CAZQ,QAYrBF,IAZqB,eAoBvBhB,MAAM,CAACgB,IAAD,CAAN,CAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjDyB,gCAkDnBA,IAlDmB,wDAAH,kBAAjBnB,CAAAA,iBAAiB,wDAAvB,CAqDD,cAAeA,CAAAA,iBAAf","sourcesContent":[" const httpGetConnection = async (url, parameters, resSuc, resFail) => {\r\n  let plusParamsUrl = url + '?';\r\n  //let plusParamsUrl = url;\r\n  // plus parameters\r\n  if (parameters !== null) {\r\n    let keys = Object.keys(parameters);\r\n    keys.forEach(key => {\r\n      plusParamsUrl += `${key}=${parameters[key]}&`\r\n    });\r\n    plusParamsUrl = plusParamsUrl.slice(0,plusParamsUrl.length-1);\r\n  }\r\n  console.log('cccc',plusParamsUrl);\r\n  let json = await fetch(plusParamsUrl, {\r\n    method: 'GET',\r\n    headers:{\r\n      'Authorization' : 'Bearer'\r\n    }\r\n  })\r\n    .then(res => res.json())\r\n    .catch(err => console.log(err));\r\n    resSuc(json);\r\n\r\n  // creation request\r\n  // let req = new XMLHttpRequest();\r\n  // // request open, with async option is true\r\n  // req.open('GET', plusParamsUrl, false);\r\n  // // set request-header authorization for cors\r\n  // req.setRequestHeader(\"Authorization\", \"Bearer\");\r\n  // req.onreadystatechange = (e) => {\r\n  //   switch (req.readyState) {\r\n  //     case XMLHttpRequest.UNSET:\r\n  //        console.log(\"현재 XMLHttpRequest 객체의 상태는 UNSET 입니다.<br>\");\r\n  //         break;\r\n  //     case XMLHttpRequest.OPENED:\r\n  //        console.log(\"현재 XMLHttpRequest 객체의 상태는 OPENED 입니다.<br>\");\r\n  //         break;\r\n  //     case XMLHttpRequest.HEADERS_RECIEVED:\r\n  //         console.log(\"현재 XMLHttpRequest 객체의 상태는 HEADERS_RECEIVED 입니다.<br>\");\r\n  //         break;\r\n  //     case XMLHttpRequest.LOADING:\r\n  //         console.log(\"현재 XMLHttpRequest 객체의 상태는 LOADING 입니다.<br>\");\r\n  //         break;\r\n  //     case XMLHttpRequest.DONE:\r\n  //         resSuc(req.responseText);\r\n  //         break;\r\n  //     default:\r\n  //         break;\r\n  //   }\r\n  // }\r\n  // req.send(null);\r\n return json;\r\n};\r\n\r\nexport default httpGetConnection;"]},"metadata":{},"sourceType":"module"}