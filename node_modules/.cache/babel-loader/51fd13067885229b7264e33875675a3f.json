{"ast":null,"code":"const httpGetConnection = (url, parameters, resSuc, resFail) => {\n  let plusParamsUrl = url + '?'; // plus parameters\n\n  if (parameters !== null) {\n    let keys = Object.keys(parameters);\n    keys.forEach(key => {\n      plusParamsUrl += `${key}=${parameters[key]}&`;\n    });\n    plusParamsUrl = plusParamsUrl.slice(0, plusParamsUrl.length - 1);\n  }\n\n  console.log(plusParamsUrl); // creation request\n\n  let req = new XMLHttpRequest(); // request open, with async option is true\n\n  req.open('GET', plusParamsUrl, true); // set request-header authorization for cors\n\n  req.setRequestHeader(\"Authorization\", \"Bearer\");\n\n  req.onreadystatechange = e => {\n    switch (req.readyState) {\n      case XMLHttpRequest.UNSET:\n        console.log(\"현재 XMLHttpRequest 객체의 상태는 UNSET 입니다.<br>\");\n        break;\n\n      case XMLHttpRequest.OPENED:\n        console.log(\"현재 XMLHttpRequest 객체의 상태는 OPENED 입니다.<br>\");\n        break;\n\n      case XMLHttpRequest.HEADERS_RECIEVED:\n        console.log(\"현재 XMLHttpRequest 객체의 상태는 HEADERS_RECEIVED 입니다.<br>\");\n        break;\n\n      case XMLHttpRequest.LOADING:\n        console.log(\"현재 XMLHttpRequest 객체의 상태는 LOADING 입니다.<br>\");\n        break;\n\n      case XMLHttpRequest.DONE:\n        console.log(\"현재 XMLHttpRequest 객체의 상태는 DONE 입니다.<br>\");\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  req.send(null);\n  return req;\n};\n\nexport default httpGetConnection;","map":{"version":3,"sources":["D:/react/test-study-redux/src/modules/httpConnection/httpGetConnection.js"],"names":["httpGetConnection","url","parameters","resSuc","resFail","plusParamsUrl","keys","Object","forEach","key","slice","length","console","log","req","XMLHttpRequest","open","setRequestHeader","onreadystatechange","e","readyState","UNSET","OPENED","HEADERS_RECIEVED","LOADING","DONE","send"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,CAACC,GAAD,EAAMC,UAAN,EAAkBC,MAAlB,EAA0BC,OAA1B,KAAsC;AAC9D,MAAIC,aAAa,GAAGJ,GAAG,GAAG,GAA1B,CAD8D,CAE9D;;AACA,MAAIC,UAAU,KAAK,IAAnB,EAAyB;AACvB,QAAII,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYJ,UAAZ,CAAX;AACAI,IAAAA,IAAI,CAACE,OAAL,CAAaC,GAAG,IAAI;AAClBJ,MAAAA,aAAa,IAAK,GAAEI,GAAI,IAAGP,UAAU,CAACO,GAAD,CAAM,GAA3C;AACD,KAFD;AAGAJ,IAAAA,aAAa,GAAGA,aAAa,CAACK,KAAd,CAAoB,CAApB,EAAsBL,aAAa,CAACM,MAAd,GAAqB,CAA3C,CAAhB;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYR,aAAZ,EAV8D,CAW9D;;AACA,MAAIS,GAAG,GAAG,IAAIC,cAAJ,EAAV,CAZ8D,CAa9D;;AACAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBX,aAAhB,EAA+B,IAA/B,EAd8D,CAe9D;;AACAS,EAAAA,GAAG,CAACG,gBAAJ,CAAqB,eAArB,EAAsC,QAAtC;;AACAH,EAAAA,GAAG,CAACI,kBAAJ,GAA0BC,CAAD,IAAO;AAC9B,YAAQL,GAAG,CAACM,UAAZ;AACE,WAAKL,cAAc,CAACM,KAApB;AACGT,QAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACC;;AACJ,WAAKE,cAAc,CAACO,MAApB;AACGV,QAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACC;;AACJ,WAAKE,cAAc,CAACQ,gBAApB;AACIX,QAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ;AACA;;AACJ,WAAKE,cAAc,CAACS,OAApB;AACIZ,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACA;;AACJ,WAAKE,cAAc,CAACU,IAApB;AACIb,QAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA;;AACJ;AACI;AAjBN;AAmBD,GApBD;;AAqBAC,EAAAA,GAAG,CAACY,IAAJ,CAAS,IAAT;AACA,SAAOZ,GAAP;AACD,CAxCD;;AA0CA,eAAed,iBAAf","sourcesContent":["const httpGetConnection = (url, parameters, resSuc, resFail) => {\r\n  let plusParamsUrl = url + '?';\r\n  // plus parameters\r\n  if (parameters !== null) {\r\n    let keys = Object.keys(parameters);\r\n    keys.forEach(key => {\r\n      plusParamsUrl += `${key}=${parameters[key]}&`\r\n    });\r\n    plusParamsUrl = plusParamsUrl.slice(0,plusParamsUrl.length-1);\r\n  }\r\n  console.log(plusParamsUrl);\r\n  // creation request\r\n  let req = new XMLHttpRequest();\r\n  // request open, with async option is true\r\n  req.open('GET', plusParamsUrl, true);\r\n  // set request-header authorization for cors\r\n  req.setRequestHeader(\"Authorization\", \"Bearer\");\r\n  req.onreadystatechange = (e) => {\r\n    switch (req.readyState) {\r\n      case XMLHttpRequest.UNSET:\r\n         console.log(\"현재 XMLHttpRequest 객체의 상태는 UNSET 입니다.<br>\");\r\n          break;\r\n      case XMLHttpRequest.OPENED:\r\n         console.log(\"현재 XMLHttpRequest 객체의 상태는 OPENED 입니다.<br>\");\r\n          break;\r\n      case XMLHttpRequest.HEADERS_RECIEVED:\r\n          console.log(\"현재 XMLHttpRequest 객체의 상태는 HEADERS_RECEIVED 입니다.<br>\");\r\n          break;\r\n      case XMLHttpRequest.LOADING:\r\n          console.log(\"현재 XMLHttpRequest 객체의 상태는 LOADING 입니다.<br>\");\r\n          break;\r\n      case XMLHttpRequest.DONE:\r\n          console.log(\"현재 XMLHttpRequest 객체의 상태는 DONE 입니다.<br>\");\r\n          break;\r\n      default:\r\n          break;\r\n    }\r\n  }\r\n  req.send(null);\r\n  return req;\r\n};\r\n\r\nexport default httpGetConnection;"]},"metadata":{},"sourceType":"module"}